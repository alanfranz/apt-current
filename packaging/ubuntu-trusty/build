#!/bin/bash -ex
# enter the directory where the build script is located
cd "${0%/*}"

TESTONLY=false
[ "$1" == "--testonly" ] && TESTONLY=true

# some useful variables
SRC_DIR="$(pwd)/../../"
CURRENT_DISTRO=$(basename $(pwd))
BUILD_IMAGE="apt-current-${CURRENT_DISTRO}-build"
TEST_IMAGE="apt-current-${CURRENT_DISTRO}-test"

${TESTONLY} || { docker build --pull -t ${BUILD_IMAGE} build-image;
	rm -rf out;
	docker run --env-file ../env.list --env=BUILD_NUMBER=${BUILD_NUMBER:-0} --env=GIT_COMMIT=${GIT_COMMIT:-0} --rm -v $(pwd)/build-inside:/build-inside:ro -v ${SRC_DIR}:/source:ro -v $(pwd)/out:/out -w /build-inside ${BUILD_IMAGE} /build-inside/build-package;
    }

# now we have the built package in out/. let's start the test phase.
# we build the test image. It should be a very minimal image, in order to check that all the deps are properly set.
# possibly it could be a totally empty image; but I prefer making it clear that it's this way.
# feel free to omit the test-image directory and set TEST_IMAGE to something you like (e.g. ubuntu:trusty)
docker build --pull -t ${TEST_IMAGE} test-image

rm -rf test-logs
# we retain the env file, even though we might not need it. The out directory is actually readonly,
# because we don't need to modify it. We create a test-logs directory which is writeable by the
# container if we want to add test logs.
docker run --env-file ../env.list --rm -v $(pwd)/test-inside:/test-inside:ro -v $(pwd)/out:/out:ro -v $(pwd)/test-logs:/test-logs -w /test-inside ${TEST_IMAGE} /test-inside/test || { echo "ERROR: the test phase failed." ; exit 1 ; }
echo "Test phase succeeded."
